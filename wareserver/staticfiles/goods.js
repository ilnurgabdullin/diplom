document.addEventListener('DOMContentLoaded', function() {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
    const accordionContainer = document.getElementById('goods-accordion');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö
    loadGoodsData();
    
    function loadGoodsData() {
      accordionContainer.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–≤—Ü–∞—Ö...</div>';
      
      fetch('/profile/get_goods/', {
        method: 'GET',
        credentials: 'include', // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å CookieJWTAuthentication
        headers: {
          'Content-Type': 'application/json',
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
        }
        return response.json();
      })
      .then(data => {
        renderAccordion(data.all_goods);
      })
      .catch(error => {
        console.error('–û—à–∏–±–∫–∞:', error);
        accordionContainer.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message + '</div>';
      });
    }
    
    function renderAccordion(goodsData) {
      // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      accordionContainer.innerHTML = '';
      
      if (!goodsData || goodsData.length === 0) {
        accordionContainer.innerHTML = '<div class="loading">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–≤—Ü–∞—Ö</div>';
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞
      goodsData.forEach(seller => {
        const accordionItem = document.createElement('div');
        accordionItem.className = 'accordion-item';
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
        const accordionHeader = document.createElement('div');
        accordionHeader.className = 'accordion-header';
        accordionHeader.textContent = `${seller.name}${seller.mark ? ' (' + seller.mark + ')' : ''}`;
        
        // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
        const accordionContent = document.createElement('div');
        accordionContent.className = 'accordion-content';
        
        // –¢–∞–±–ª–∏—Ü–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        const productsTable = document.createElement('table');
            productsTable.className = 'products-table';
            productsTable.innerHTML = `
            <thead>
                <tr>
                <th>–®—Ç—Ä–∏—Ö–∫–æ–¥</th>
                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${seller.goods && seller.goods.length > 0 
                ? seller.goods.map(good => `
                    <tr data-good-id="${good.barc}">
                    <td>${good.barc || '-'}</td>
                    <td class="editable-name">${good.name || '-'}</td>
                    <td>
                        <button class="edit-btn">‚úèÔ∏è</button>
                        <button class="save-btn" style="display:none">üíæ</button>
                    </td>
                    </tr>
                `).join('')
                : '<tr><td colspan="3">–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤</td></tr>'
                }
  </tbody>
`;

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
productsTable.addEventListener('click', async (event) => {
  const editBtn = event.target.closest('.edit-btn');
  const saveBtn = event.target.closest('.save-btn');
  
  if (editBtn) {
    const row = editBtn.closest('tr');
    const nameCell = row.querySelector('.editable-name');
    const currentName = nameCell.textContent;
    
    // –°–æ–∑–¥–∞–µ–º input –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    nameCell.innerHTML = `<input type="text" value="${currentName}" class="name-edit-input">`;
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
    editBtn.style.display = 'none';
    row.querySelector('.save-btn').style.display = 'inline-block';
  }
  
  if (saveBtn) {
    const row = saveBtn.closest('tr');
    const goodId = row.dataset.goodId;
    const newName = row.querySelector('.name-edit-input').value;
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
      const response = await fetch('/profile/update_good/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          goodId: goodId,
          newName: newName
        })
      });
      
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const nameCell = row.querySelector('.editable-name');
      nameCell.textContent = newName;
      
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
      saveBtn.style.display = 'none';
      row.querySelector('.edit-btn').style.display = 'inline-block';
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
    }
  }
});

        
        // –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        const addForm = document.createElement('div');
        addForm.className = 'add-product-form';
        addForm.innerHTML = `
          <input type="text" placeholder="–ë–∞—Ä–∫–æ–¥" class="barcode-input">
          <input type="text" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞" class="name-input">
          <button class="add-btn">–î–æ–±–∞–≤–∏—Ç—å</button>
        `;
        
        // –°–æ–±–∏—Ä–∞–µ–º –∞–∫–∫–æ—Ä–¥–µ–æ–Ω
        accordionContent.appendChild(productsTable);
        accordionContent.appendChild(addForm);
        accordionItem.appendChild(accordionHeader);
        accordionItem.appendChild(accordionContent);
        accordionContainer.appendChild(accordionItem);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        accordionHeader.addEventListener('click', function() {
          const isActive = accordionItem.classList.contains('active');
          accordionItem.classList.toggle('active', !isActive);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        addForm.querySelector('.add-btn').addEventListener('click', function(event) {
          addProduct(event, seller.sel_id);
        });
      });
      
    }
    
    function addProduct(event, seller) {
      const form = event.target.closest('.add-product-form');
      const barcode = form.querySelector('.barcode-input').value.trim();
      const name = form.querySelector('.name-input').value.trim();
      
      if (!barcode || !name) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
      }
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ ${seller}:`, { barcode, name });
      try {
                const response =  fetch('/profile/add_good/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        seller_id : seller,
                        name: name,
                        vendorcode : barcode
                     }),
                    credentials: 'include' 
                });
            } catch (error) {
                console.log(error)
            }
      // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      form.querySelector('.barcode-input').value = '';
      form.querySelector('.name-input').value = '';
      loadGoodsData();
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞
    
  });